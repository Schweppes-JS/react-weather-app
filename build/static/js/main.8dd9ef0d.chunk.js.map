{"version":3,"sources":["components/Card/Card.module.css","components/Options/Options.module.css","components/Searcher/Searcher.module.css","App.module.css","reportWebVitals.ts","components/Card/Card.tsx","assets/images/loader.svg","components/commom/Loader/Loader.tsx","store/reducers/optionsSlice.ts","store/reducers/weatherSlice.ts","components/Options/Options.tsx","services/translateService.ts","components/Searcher/Searcher.tsx","App.tsx","services/persistenceService.ts","store/sagas/changeCurrentLanguageSaga.ts","store/sagas/changeTemperatureUnitSaga.ts","store/sagas/getOptionsSaga.ts","selectors/optionsSelector.ts","services/getWeatherService.ts","store/sagas/getWeatherByCitySaga.ts","services/getPositionService.ts","store/sagas/getWeatherSaga.ts","store/sagas/index.ts","store/index.ts","AppContainer.tsx","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","date","Date","useSelector","state","weather","weatherData","dt","toLocaleDateString","city","name","icon","description","temprature","main","temp","toFixed","temperatureUnit","options","className","style","wrapper","infoBlock","infoLine","src","alt","Loader","loader","optionSlice","createSlice","initialState","currentLanguage","reducers","getOptions","setTemperatureUnit","action","payload","setCurrentLanguage","changeTemperatureUnit","changeCurrentLanguage","actions","weatherSlice","isLoading","error","getWeather","getWeatherSuccess","getWeatherFailure","getWeatherByCity","Options","dispatch","useDispatch","optionBlock","value","onChange","event","currentTarget","optionLine","translateService","type","code","Searcher","useState","inputValue","setInputValue","headline","form","onSubmit","preventDefault","input","placeholder","button","width","height","viewBox","fill","xmlns","d","App","useEffect","persistanceService","key","data","localStorage","setItem","JSON","stringify","parse","getItem","changeCurrentLanguageWorker","changeCurrentLanguageWatcher","call","put","Error","message","takeEvery","changeTemperatureUnitWorker","changeTemperatureUnitWatcher","getOptionsWorker","getOptionsWatcher","getCurrentLanguage","getTemperatureUnit","instance","axios","create","baseURL","getWeatherService","coordinates","language","units","get","latitude","longitude","getWeatherByCityWorker","getWeatherByCityWatcher","select","response","getPosition","a","enableHighAccuracy","timeout","maximumAge","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","getWeatherWorker","getWeatherWatcher","location","coords","rootWatcher","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","optionsSlice","middleware","getDefaultMiddleware","thunk","devTools","run","AppContainer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8dd9ef0d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Card_wrapper__292H7\",\"infoBlock\":\"Card_infoBlock__2qbYs\",\"infoLine\":\"Card_infoLine__y2SKi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Options_wrapper__3KGTR\",\"optionBlock\":\"Options_optionBlock__3r3U4\",\"optionLine\":\"Options_optionLine__1SM6O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Searcher_wrapper__4uvOm\",\"headline\":\"Searcher_headline__3DXaz\",\"form\":\"Searcher_form__1DYPn\",\"input\":\"Searcher_input__26rA0\",\"button\":\"Searcher_button__Xt9ST\",\"icon\":\"Searcher_icon__1QsOa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__2wiTm\",\"error\":\"App_error__1g72G\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { FunctionComponent } from 'react';\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../store/types/rootState\";\r\nimport style from \"./Card.module.css\";\r\n\r\nconst Card: FunctionComponent = () => {\r\n  \r\n  const date = new Date((useSelector((state: RootState) => state.weather.weatherData?.dt))! * 1000).toLocaleDateString();\r\n  const city = useSelector((state: RootState) => state.weather.weatherData?.name);\r\n  const icon = useSelector((state: RootState) => state.weather.weatherData?.weather[0].icon);\r\n  const description = useSelector((state: RootState) => state.weather.weatherData?.weather[0].description);\r\n  const temprature = useSelector((state: RootState) => state.weather.weatherData?.main.temp)?.toFixed(1);\r\n  const temperatureUnit = useSelector((state: RootState) => state.options.temperatureUnit);\r\n  \r\n  return (\r\n    <div className={style.wrapper}>\r\n\r\n      <div className={style.infoBlock}>\r\n        <p className={style.infoLine}>{city}</p>\r\n        <p className={style.infoLine}>{date}</p>\r\n      </div>\r\n\r\n      <div className={style.infoBlock}>\r\n        <div className={style.infoLine}>\r\n          <img src={icon && `http://openweathermap.org/img/wn/${icon}@2x.png`} alt={`${description}`}/>\r\n        </div>\r\n        <p className={style.infoLine}>{description}</p>\r\n      </div>\r\n      \r\n      <div className={style.infoBlock}>\r\n        <p className={style.infoLine}>{temprature}</p>\r\n        <p className={style.infoLine}>{temperatureUnit}</p>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card;\r\n","export default __webpack_public_path__ + \"static/media/loader.5aea8c64.svg\";","import React, { FunctionComponent } from 'react';\r\nimport loader from \"../../../assets/images/loader.svg\";\r\n\r\nconst Loader: FunctionComponent = () => {\r\n  return (\r\n    <>\r\n      <img src={loader} alt=\"Loading...\"/>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Loader\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { ChangeTemperatureUnitAction } from \"../types/changeTemperatureUnitAction\";\r\nimport { OptionsState } from \"../types/optionsState\";\r\n\r\nconst optionSlice = createSlice({\r\n  name: \"options\",\r\n  initialState: {\r\n    temperatureUnit: \"°C\",\r\n    currentLanguage: \"en\"\r\n  },\r\n  reducers: {\r\n    getOptions: (state: OptionsState): void => {\r\n      // do nithig\r\n    },\r\n    setTemperatureUnit: (state: OptionsState, action): void => {\r\n      state.temperatureUnit = action.payload;\r\n    },\r\n    setCurrentLanguage: (state: OptionsState, action): void => {\r\n      state.currentLanguage = action.payload;\r\n    },\r\n    changeTemperatureUnit: (state: OptionsState, action: ChangeTemperatureUnitAction): void => {\r\n      // do nithig\r\n    },\r\n    changeCurrentLanguage: (state: OptionsState, action): void => {\r\n      // do nithig\r\n    }\r\n  }\r\n});\r\n\r\nexport default optionSlice.reducer;\r\nexport const { getOptions, setTemperatureUnit, setCurrentLanguage,\r\n  changeTemperatureUnit, changeCurrentLanguage } = optionSlice.actions\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { GetWeatherByCityAction } from \"../types/getWeatherByCityAction\";\r\nimport { GetWeatherFailureAction } from \"../types/getWeatherFailureAction\";\r\nimport { GetWeatherSuccessAction } from \"../types/getWeatherSuccessAction\";\r\nimport { WeatherState } from \"../types/weatherState\";\r\n\r\nconst weatherSlice = createSlice({\r\n  name: \"weather\",\r\n  initialState: {\r\n    isLoading: false,\r\n    weatherData: null,\r\n    error: null\r\n  },\r\n  reducers: {\r\n    getWeather: (state: WeatherState): void => {\r\n      state.isLoading = true;\r\n    },\r\n    getWeatherSuccess: (state: WeatherState, action: GetWeatherSuccessAction): void => {\r\n      state.weatherData = action.payload;\r\n      state.isLoading = false;\r\n      state.error = null;\r\n    },\r\n    getWeatherFailure: (state: WeatherState, action: GetWeatherFailureAction): void => {\r\n      state.error = action.payload;\r\n      state.isLoading = false;\r\n    },\r\n    getWeatherByCity: (state: WeatherState, action: GetWeatherByCityAction): void => {\r\n      state.isLoading = true;\r\n    }\r\n  }\r\n});\r\n\r\nexport default weatherSlice.reducer;\r\nexport const { getWeather, getWeatherSuccess, getWeatherFailure, getWeatherByCity } = weatherSlice.actions;","import React, { FunctionComponent } from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { changeCurrentLanguage, changeTemperatureUnit } from \"../../store/reducers/optionsSlice\";\r\nimport { getWeatherByCity } from \"../../store/reducers/weatherSlice\";\r\nimport { RootState } from \"../../store/types/rootState\";\r\nimport style from \"./Options.module.css\";\r\n\r\nconst Options: FunctionComponent = () => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const temperatureUnit = useSelector((state: RootState) => state.options.temperatureUnit);\r\n  const currentLanguage = useSelector((state: RootState) => state.options.currentLanguage);\r\n  const city = useSelector((state: RootState) => state.weather.weatherData?.name)!;\r\n\r\n  const onTemperatureUnitChange = (event: React.FormEvent<HTMLSelectElement>): void => {\r\n    dispatch(changeTemperatureUnit(event.currentTarget.value));\r\n    dispatch(getWeatherByCity(city));\r\n  }\r\n\r\n  const onCurrentLanguageChange = (event: React.FormEvent<HTMLSelectElement>): void => {\r\n    dispatch(changeCurrentLanguage(event.currentTarget.value));\r\n    dispatch(getWeatherByCity(city));\r\n  }\r\n\r\n  return (\r\n    <div className={style.wrapper}>\r\n\r\n      <select className={style.optionBlock} value={temperatureUnit} onChange={onTemperatureUnitChange}>\r\n        <option className={style.optionLine} value=\"°F\">°F</option>\r\n        <option className={style.optionLine} value=\"°C\">°C</option>\r\n      </select>\r\n\r\n      <select className={style.optionBlock} value={currentLanguage} onChange={onCurrentLanguageChange}>\r\n        <option className={style.optionLine } value=\"en\">English</option>\r\n        <option className={style.optionLine} value=\"ru\">Русский</option>\r\n        <option className={style.optionLine} value=\"ua\">Українська</option>\r\n      </select>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Options;\r\n","export const translateService = (type: string, code: string): string => {\r\n\r\n  const languages: {[key: string]: {[key: string]: string}} = {\r\n    \"headline\" : {\r\n      \"en\": \"Current Weather\",\r\n      \"ru\": \"Текущая погода\",\r\n      \"ua\": \"Поточна погода\"\r\n    },\r\n    \"placeholder\" : {\r\n      \"en\": \"Enter the city\",\r\n      \"ru\": \"Введите город\",\r\n      \"ua\": \"Введіть місто\"\r\n    },\r\n    \"searchError\" : {\r\n      \"en\": \"Incorrect city\",\r\n      \"ru\": \"Неверно введен город\",\r\n      \"ua\": \"Невірно введене місто\"\r\n    },\r\n    \"geolocationError\" : {\r\n      \"en\": \"User denied geolocation prompt\",\r\n      \"ru\": \"Пользователь запретил доступ к геолокации\",\r\n      \"ua\": \"Користувач заборонив доступ до геолокації\"\r\n    },\r\n    \r\n  }\r\n\r\n  return languages[type][code];\r\n}","import React, { ChangeEvent, FormEvent, FunctionComponent, useState } from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { translateService } from \"../../services/translateService\";\r\nimport { getWeatherByCity } from \"../../store/reducers/weatherSlice\";\r\nimport { RootState } from \"../../store/types/rootState\";\r\nimport style from \"./Searcher.module.css\";\r\n\r\nconst Searcher: FunctionComponent = () => {\r\n\r\n  const dispatch = useDispatch();\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const currentLanguage = useSelector((state: RootState) => state.options.currentLanguage);\r\n\r\n  const handleSubmit = (event: FormEvent) => {\r\n    event.preventDefault();\r\n    dispatch(getWeatherByCity(inputValue));\r\n    setInputValue(\"\");\r\n  }\r\n\r\n  const onInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    setInputValue(event.currentTarget.value);\r\n  }\r\n\r\n  return (\r\n    <div className={style.wrapper}>\r\n      \r\n      <h1 className={style.headline}>{translateService(\"headline\", currentLanguage)}</h1>\r\n      <form className={style.form} onSubmit={handleSubmit}>\r\n        <input className={style.input}  type=\"text\" placeholder={translateService(\"placeholder\", currentLanguage)} value={inputValue} onChange={onInputChange}/>\r\n        <button className={style.button} type=\"submit\">\r\n          <svg className={style.icon} width=\"36\" height=\"37\" viewBox=\"0 0 36 37\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M35.5078 31.6484L28.4766 24.6172C28.125 24.3359 27.7031 24.125 27.2812 24.125H26.1562C28.0547 21.6641 29.25 18.5703 29.25 15.125C29.25 7.10938 22.6406 0.5 14.625 0.5C6.53906 0.5 0 7.10938 0 15.125C0 23.2109 6.53906 29.75 14.625 29.75C18 29.75 21.0938 28.625 23.625 26.6562V27.8516C23.625 28.2734 23.7656 28.6953 24.1172 29.0469L31.0781 36.0078C31.7812 36.7109 32.8359 36.7109 33.4688 36.0078L35.4375 34.0391C36.1406 33.4062 36.1406 32.3516 35.5078 31.6484ZM14.625 24.125C9.63281 24.125 5.625 20.1172 5.625 15.125C5.625 10.2031 9.63281 6.125 14.625 6.125C19.5469 6.125 23.625 10.2031 23.625 15.125C23.625 20.1172 19.5469 24.125 14.625 24.125Z\" fill=\"#512261\"/>\r\n          </svg>\r\n        </button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Searcher;\r\n","import React, { FunctionComponent, useEffect } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport style from './App.module.css';\nimport Card from \"./components/Card/Card\";\nimport Loader from \"./components/commom/Loader/Loader\";\nimport Options from \"./components/Options/Options\";\nimport Searcher from \"./components/Searcher/Searcher\";\nimport { getOptions } from \"./store/reducers/optionsSlice\";\nimport { getWeather } from \"./store/reducers/weatherSlice\";\nimport { RootState } from \"./store/types/rootState\";\n\nconst App: FunctionComponent = () => {\n\n  const isLoading = useSelector((state: RootState) => state.weather.isLoading);\n  const error = useSelector((state: RootState) => state.weather.error);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getOptions());\n    dispatch(getWeather());\n  }, []);\n\n  return (\n    <>\n      {\n      isLoading ?\n        <Loader /> : \n        <div className={style.wrapper}>\n          <Options />\n          <Searcher />\n          {error ? <h1 className={style.error}>{error}</h1> : <Card />}\n        </div>\n      }\n    </>\n  );\n}\n\nexport default App;\n","export const persistanceService = {\r\n\r\n  set(key: string, data: any): void {\r\n    localStorage.setItem(key, JSON.stringify(data));\r\n  },\r\n  \r\n  get(key: string): string {\r\n      return JSON.parse(localStorage.getItem(key)!);\r\n  }\r\n}","import { call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { persistanceService } from \"../../services/persistenceService\";\r\nimport { changeCurrentLanguage, setCurrentLanguage } from \"../reducers/optionsSlice\";\r\nimport { ChangeCurrentLanguageAction } from \"../types/changeCurrentLanguageAction\";\r\n\r\nfunction* changeCurrentLanguageWorker({payload}: ChangeCurrentLanguageAction) {\r\n  try {\r\n    yield call(persistanceService.set, \"currentLanguage\", payload);\r\n    yield put(setCurrentLanguage(payload));\r\n  } catch (error) {\r\n    throw new Error(error.message);\r\n  }\r\n}\r\n\r\nexport function* changeCurrentLanguageWatcher() {\r\n  yield takeEvery(changeCurrentLanguage.type, changeCurrentLanguageWorker)\r\n}\r\n\r\n","import { call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { persistanceService } from \"../../services/persistenceService\";\r\nimport { changeTemperatureUnit, setTemperatureUnit} from \"../reducers/optionsSlice\";\r\nimport { ChangeTemperatureUnitAction } from \"../types/changeTemperatureUnitAction\";\r\n\r\nfunction* changeTemperatureUnitWorker({payload}: ChangeTemperatureUnitAction) {\r\n  try {\r\n    yield call(persistanceService.set, \"temperatureUnit\", payload);\r\n    yield put(setTemperatureUnit(payload));\r\n  } catch (error) {\r\n    throw new Error(error.message);\r\n  }\r\n}\r\n\r\nexport function* changeTemperatureUnitWatcher() {\r\n  yield takeEvery(changeTemperatureUnit.type, changeTemperatureUnitWorker)\r\n}\r\n\r\n","import { call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { persistanceService } from \"../../services/persistenceService\";\r\nimport { getOptions, setCurrentLanguage, setTemperatureUnit } from \"../reducers/optionsSlice\";\r\n\r\nfunction* getOptionsWorker() {\r\n  try {\r\n    const temperatureUnit: string = yield call(persistanceService.get, \"temperatureUnit\");\r\n    if(temperatureUnit) {\r\n      yield put(setTemperatureUnit(temperatureUnit));\r\n    }\r\n    const currentLanguage: string = yield call(persistanceService.get, \"currentLanguage\");\r\n    if(currentLanguage) {\r\n      yield put(setCurrentLanguage(currentLanguage));\r\n    }\r\n  } catch (error) {\r\n    throw new Error(error.message);\r\n  }\r\n}\r\n\r\nexport function* getOptionsWatcher() {\r\n  yield takeEvery(getOptions.type, getOptionsWorker)\r\n}\r\n\r\n","import { RootState } from \"../store/types/rootState\";\r\n\r\nexport const getCurrentLanguage = (state: RootState) => state.options.currentLanguage;\r\nexport const getTemperatureUnit = (state: RootState) => state.options.temperatureUnit;\r\n","import axios, { AxiosResponse } from \"axios\";\r\nimport { Coordinates } from \"../types/coordinates\";\r\n\r\nconst key = \"cacbd70b82a328cf33e7567db06fbff4\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"http://api.openweathermap.org/data/2.5/\",\r\n});\r\n\r\nexport const getWeatherService = {\r\n\r\n  byCoordinates: (coordinates: Coordinates, temperatureUnit = \"°C\", language = 'en'): Promise<AxiosResponse> => {\r\n\r\n    const units: {[key: string]: string} = {\r\n      \"°C\": \"metric\",\r\n      \"°F\": \"imperial\"\r\n    }\r\n\r\n    return instance.get(`weather?lat=${coordinates.latitude}&lon=${coordinates.longitude}&units=${units[temperatureUnit]}&lang=${language}&appid=${key}`)\r\n  },\r\n\r\n  byCity: (city: string, temperatureUnit = \"°C\", language = 'en'): Promise<AxiosResponse> => {\r\n\r\n    const units: {[key: string]: string} = {\r\n      \"°C\": \"metric\",\r\n      \"°F\": \"imperial\"\r\n    }\r\n\r\n    return instance.get(`weather?q=${city}&units=${units[temperatureUnit]}&lang=${language}&appid=${key}`)\r\n  }\r\n}","import { AxiosResponse } from \"axios\";\r\nimport { call, put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { getCurrentLanguage, getTemperatureUnit } from \"../../selectors/optionsSelector\";\r\nimport { getWeatherService } from \"../../services/getWeatherService\";\r\nimport { translateService } from \"../../services/translateService\";\r\nimport { getWeatherByCity, getWeatherFailure, getWeatherSuccess } from \"../reducers/weatherSlice\";\r\nimport { GetWeatherByCityAction } from \"../types/getWeatherByCityAction\";\r\n\r\nfunction* getWeatherByCityWorker({payload}: GetWeatherByCityAction) {\r\n  try {\r\n    const currentLanguage: string = yield select(getCurrentLanguage);\r\n    const temperatureUnit: string = yield select(getTemperatureUnit);\r\n    const response: AxiosResponse = yield call(getWeatherService.byCity, payload, temperatureUnit, currentLanguage);\r\n    yield put(getWeatherSuccess(response.data));\r\n  } catch (error) {\r\n    const currentLanguage: string = yield select(getCurrentLanguage);\r\n    yield put(getWeatherFailure(translateService(\"searchError\", currentLanguage)));\r\n  }\r\n}\r\n\r\nexport function* getWeatherByCityWatcher() {\r\n  yield takeEvery(getWeatherByCity.type, getWeatherByCityWorker)\r\n}\r\n\r\n","export const getPosition = async (): Promise<GeolocationPosition> => {\r\n\r\n  const options = {\r\n    enableHighAccuracy: true,\r\n    timeout: 15000,\r\n    maximumAge: 3600000\r\n  };\r\n\r\n  return new Promise((resolve, reject) => \r\n      navigator.geolocation.getCurrentPosition(resolve, reject, options)\r\n  );\r\n}","import { AxiosResponse } from \"axios\";\r\nimport { call, put, select, takeEvery } from \"redux-saga/effects\";\r\nimport { getCurrentLanguage, getTemperatureUnit } from \"../../selectors/optionsSelector\";\r\nimport { getPosition } from \"../../services/getPositionService\";\r\nimport { getWeatherService } from \"../../services/getWeatherService\";\r\nimport { translateService } from \"../../services/translateService\";\r\nimport { Coordinates } from \"../../types/coordinates\";\r\nimport { getWeather, getWeatherFailure, getWeatherSuccess } from \"../reducers/weatherSlice\";\r\n\r\nfunction* getWeatherWorker() {\r\n  try {\r\n    const location: GeolocationPosition = yield call(getPosition);\r\n    const coordinates: Coordinates = {\r\n      latitude: location.coords.latitude,\r\n      longitude: location.coords.longitude\r\n    }\r\n    const currentLanguage: string = yield select(getCurrentLanguage);\r\n    const temperatureUnit: string = yield select(getTemperatureUnit);\r\n    const response: AxiosResponse = yield call(getWeatherService.byCoordinates, coordinates, temperatureUnit, currentLanguage);\r\n    yield put(getWeatherSuccess(response.data));\r\n  } catch (error) {\r\n    const currentLanguage: string = yield select(getCurrentLanguage);\r\n    yield put(getWeatherFailure(translateService(\"geolocationError\", currentLanguage)));\r\n  }\r\n}\r\n\r\nexport function* getWeatherWatcher() {\r\n  yield takeEvery(getWeather.type, getWeatherWorker)\r\n}\r\n\r\n","import { all } from \"redux-saga/effects\";\r\nimport { changeCurrentLanguageWatcher } from \"./changeCurrentLanguageSaga\";\r\nimport { changeTemperatureUnitWatcher } from \"./changeTemperatureUnitSaga\";\r\nimport { getOptionsWatcher } from \"./getOptionsSaga\";\r\nimport { getWeatherByCityWatcher } from \"./getWeatherByCitySaga\";\r\nimport { getWeatherWatcher } from \"./getWeatherSaga\";\r\n\r\nexport function* rootWatcher() {\r\n  yield all([getWeatherWatcher(), getOptionsWatcher(), changeCurrentLanguageWatcher(), changeTemperatureUnitWatcher(),\r\n    getWeatherByCityWatcher()]);\r\n}","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport optionsSlice from \"./reducers/optionsSlice\";\r\nimport weatherSlice from \"./reducers/weatherSlice\";\r\nimport { rootWatcher } from \"./sagas\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    weather: weatherSlice,\r\n    options: optionsSlice\r\n  },\r\n  middleware: [...getDefaultMiddleware({thunk: false}), sagaMiddleware],\r\n  devTools: true\r\n});\r\n\r\nsagaMiddleware.run(rootWatcher);","import React, { FunctionComponent } from 'react';\r\nimport { Provider } from \"react-redux\";\r\nimport App from './App';\r\nimport { store } from \"./store\";\r\n\r\nconst AppContainer: FunctionComponent = () => {\r\n  return (\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n  );\r\n}\r\n\r\nexport default AppContainer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport AppContainer from \"./AppContainer\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppContainer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}